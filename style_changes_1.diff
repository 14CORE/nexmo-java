diff --git a/src/com/nexmo/common/http/HttpClientUtils.java b/src/com/nexmo/common/http/HttpClientUtils.java
index f2becee..f7edd5c 100644
--- a/src/com/nexmo/common/http/HttpClientUtils.java
+++ b/src/com/nexmo/common/http/HttpClientUtils.java
@@ -44,7 +44,7 @@ import org.apache.http.impl.client.DefaultHttpClient;
  */
 public class HttpClientUtils {
 
-    private final static Map<String, HttpClientUtils> instances = new HashMap<String, HttpClientUtils>();
+    private final static Map<String, HttpClientUtils> instances = new HashMap<>();
 
     private final ThreadSafeClientConnManager threadSafeClientConnManager;
 
diff --git a/src/com/nexmo/insight/sdk/InsightResult.java b/src/com/nexmo/insight/sdk/InsightResult.java
index 1472bef..c3f67c8 100644
--- a/src/com/nexmo/insight/sdk/InsightResult.java
+++ b/src/com/nexmo/insight/sdk/InsightResult.java
@@ -87,35 +87,35 @@ public class InsightResult {
     }
 
     public int getStatus() {
-        return status;
+        return this.status;
     }
 
     public String getErrorText() {
-        return errorText;
+        return this.errorText;
     }
 
     public boolean isTemporaryError() {
-        return temporaryError;
+        return this.temporaryError;
     }
 
     public String getRequestId() {
-        return requestId;
+        return this.requestId;
     }
 
     public String getNumber() {
-        return number;
+        return this.number;
     }
 
     public float getRequestPrice() {
-        return requestPrice;
+        return this.requestPrice;
     }
 
     public float getRemainingBalance() {
-        return remainingBalance;
+        return this.remainingBalance;
     }
 
     @Override
     public String toString() {
-        return "InsightResult [status=" + getStatus() + ", requestId=" + requestId + "]";
+        return "InsightResult [status=" + getStatus() + ", requestId=" + this.requestId + "]";
     }
 }
diff --git a/src/com/nexmo/insight/sdk/NexmoInsightClient.java b/src/com/nexmo/insight/sdk/NexmoInsightClient.java
index 0932c39..dfaf187 100644
--- a/src/com/nexmo/insight/sdk/NexmoInsightClient.java
+++ b/src/com/nexmo/insight/sdk/NexmoInsightClient.java
@@ -132,12 +132,14 @@ public class NexmoInsightClient {
                               final int soTimeout) throws ParserConfigurationException {
 
         // Derive a http and a https version of the supplied base url
-        baseUrl = baseUrl.trim();
-        String lc = baseUrl.toLowerCase();
+        if (baseUrl == null)
+            throw new IllegalArgumentException("base url is null");
+        String url = baseUrl.trim();
+        String lc = url.toLowerCase();
         if (!lc.startsWith("http://") && !lc.startsWith("https://"))
             throw new IllegalArgumentException("base url does not start with http:// or https://");
 
-        this.baseUrl = baseUrl;
+        this.baseUrl = url;
         this.apiKey = apiKey;
         this.apiSecret = apiSecret;
         this.connectionTimeout = connectionTimeout;
@@ -161,7 +163,7 @@ public class NexmoInsightClient {
 
         log.debug("HTTP-Number-Insight Client .. to [ " + number + " ] ");
 
-        List<NameValuePair> params = new ArrayList<NameValuePair>();
+        List<NameValuePair> params = new ArrayList<>();
 
         params.add(new BasicNameValuePair("api_key", this.apiKey));
         params.add(new BasicNameValuePair("api_secret", this.apiSecret));
@@ -184,7 +186,7 @@ public class NexmoInsightClient {
         if (clientRef != null)
             params.add(new BasicNameValuePair("client_ref", clientRef));
 
-        String baseUrl = this.baseUrl + PATH_INSIGHT;
+        String inshightBaseUrl = this.baseUrl + PATH_INSIGHT;
 
         // Now that we have generated a query string, we can instanciate a HttpClient,
         // construct a POST or GET method and execute to submit the request
@@ -195,13 +197,13 @@ public class NexmoInsightClient {
             final boolean doPost = true;
             String url;
             if (doPost) {
-                HttpPost httpPost = new HttpPost(baseUrl);
+                HttpPost httpPost = new HttpPost(inshightBaseUrl);
                 httpPost.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
                 method = httpPost;
-                url = baseUrl + "?" + URLEncodedUtils.format(params, "utf-8");
+                url = inshightBaseUrl + "?" + URLEncodedUtils.format(params, "utf-8");
             } else {
                 String query = URLEncodedUtils.format(params, "utf-8");
-                method = new HttpGet(baseUrl + "?" + query);
+                method = new HttpGet(inshightBaseUrl + "?" + query);
                 url = method.getRequestLine().getUri();
             }
 
@@ -261,7 +263,7 @@ public class NexmoInsightClient {
         return sbStr.toString();
     }
 
-    private InsightResult parseInsightResult(Element root) throws IOException {
+    private static InsightResult parseInsightResult(Element root) throws IOException {
         String requestId = null;
         String number = null;
         float price = -1;
diff --git a/src/com/nexmo/messaging/sdk/NexmoSmsClient.java b/src/com/nexmo/messaging/sdk/NexmoSmsClient.java
index de833c6..47a058b 100644
--- a/src/com/nexmo/messaging/sdk/NexmoSmsClient.java
+++ b/src/com/nexmo/messaging/sdk/NexmoSmsClient.java
@@ -223,16 +223,18 @@ public class NexmoSmsClient {
                           final boolean useSSL) throws Exception {
 
         // Derive a http and a https version of the supplied base url
-        baseUrl = baseUrl.trim();
-        String lc = baseUrl.toLowerCase();
+        if (baseUrl == null)
+            throw new IllegalArgumentException("base url is null");
+        String url = baseUrl.trim();
+        String lc = url.toLowerCase();
         if (!lc.startsWith("http://") && !lc.startsWith("https://"))
             throw new Exception("base url does not start with http:// or https://");
         if (lc.startsWith("http://")) {
-            this.baseUrlHttp = baseUrl;
-            this.baseUrlHttps = "https://" + baseUrl.substring(7);
+            this.baseUrlHttp = url;
+            this.baseUrlHttps = "https://" + url.substring(7);
         } else {
-            this.baseUrlHttps = baseUrl;
-            this.baseUrlHttp = "http://" + baseUrl.substring(8);
+            this.baseUrlHttps = url;
+            this.baseUrlHttp = "http://" + url.substring(8);
         }
 
         this.apiKey = apiKey;
@@ -356,7 +358,7 @@ public class NexmoSmsClient {
 
         // Construct a query string as a list of NameValuePairs
 
-        List<NameValuePair> params = new ArrayList<NameValuePair>();
+        List<NameValuePair> params = new ArrayList<>();
 
         boolean doPost = false;
 
@@ -498,7 +500,7 @@ public class NexmoSmsClient {
                 </mt-submission-response>
         */
 
-        List<SmsSubmissionResult> results = new ArrayList<SmsSubmissionResult>();
+        List<SmsSubmissionResult> results = new ArrayList<>();
 
         Document doc = null;
         synchronized(this.documentBuilder) {
diff --git a/src/com/nexmo/messaging/sdk/callback/AbstractMOServlet.java b/src/com/nexmo/messaging/sdk/callback/AbstractMOServlet.java
index b2f9da7..076a6da 100644
--- a/src/com/nexmo/messaging/sdk/callback/AbstractMOServlet.java
+++ b/src/com/nexmo/messaging/sdk/callback/AbstractMOServlet.java
@@ -236,9 +236,10 @@ public abstract class AbstractMOServlet extends HttpServlet {
         this.consumer.execute(task);
         
         // immediately ack the receipt
-        PrintWriter out = response.getWriter();
-        out.print("OK");
-        out.close();
+        try (PrintWriter out = response.getWriter()) {
+            out.print("OK");
+            out.flush();
+        }
     }
 
     /**
diff --git a/src/com/nexmo/messaging/sdk/messages/parameters/ValidityPeriod.java b/src/com/nexmo/messaging/sdk/messages/parameters/ValidityPeriod.java
index 2a5b5f5..7c8f251 100644
--- a/src/com/nexmo/messaging/sdk/messages/parameters/ValidityPeriod.java
+++ b/src/com/nexmo/messaging/sdk/messages/parameters/ValidityPeriod.java
@@ -56,7 +56,7 @@ public class ValidityPeriod implements java.io.Serializable {
     public ValidityPeriod(final int timeToLive) {
         if (timeToLive < 1)
             throw new IllegalArgumentException("Negative TTL Not Allowed!");
-        this.timeToLive = timeToLive;
+        this.timeToLive = Integer.valueOf(timeToLive);
         this.validityPeriodHours = null;
         this.validityPeriodMinutes = null;
         this.validityPeriodSeconds = null;
@@ -75,9 +75,9 @@ public class ValidityPeriod implements java.io.Serializable {
                           final int validityPeriodMinutes,
                           final int validityPeriodSeconds) {
         this.timeToLive = null;
-        this.validityPeriodHours = validityPeriodHours;
-        this.validityPeriodMinutes = validityPeriodMinutes;
-        this.validityPeriodSeconds = validityPeriodSeconds;
+        this.validityPeriodHours = Integer.valueOf(validityPeriodHours);
+        this.validityPeriodMinutes = Integer.valueOf(validityPeriodMinutes);
+        this.validityPeriodSeconds = Integer.valueOf(validityPeriodSeconds);
     }
 
     /**
diff --git a/src/com/nexmo/security/VerifySignature.java b/src/com/nexmo/security/VerifySignature.java
index 55326c6..ca1bed6 100644
--- a/src/com/nexmo/security/VerifySignature.java
+++ b/src/com/nexmo/security/VerifySignature.java
@@ -68,7 +68,8 @@ public class VerifySignature implements SecurityConstants {
         try {
             time = Long.parseLong(timeString) * 1000;
         } catch (NumberFormatException e) {
-        	time = 0;
+            log.debug("Error parsing 'time' parameter [ " + timeString + " ]", e);
+            time = 0;
         }
         long diff = System.currentTimeMillis() - time;
         if (diff > MAX_ALLOWABLE_TIME_DELTA || diff < -MAX_ALLOWABLE_TIME_DELTA) {
@@ -77,7 +78,7 @@ public class VerifySignature implements SecurityConstants {
         }
 
         // Next, construct a sorted list of the name-value pair parameters supplied in the request, excluding the signature parameter
-        Map<String, String> sortedParams = new TreeMap<String, String>();
+        Map<String, String> sortedParams = new TreeMap<>();
         for (Iterator<?> I = request.getParameterMap().entrySet().iterator();I.hasNext();) {
             Map.Entry<?, ?> param = (Map.Entry<?, ?>)I.next();
             String name = (String)param.getKey();
diff --git a/src/com/nexmo/sns/sdk/NexmoSnsClient.java b/src/com/nexmo/sns/sdk/NexmoSnsClient.java
index fcbd046..ddbd6b8 100644
--- a/src/com/nexmo/sns/sdk/NexmoSnsClient.java
+++ b/src/com/nexmo/sns/sdk/NexmoSnsClient.java
@@ -142,16 +142,18 @@ public class NexmoSnsClient {
                           final int soTimeout) throws Exception {
 
         // Derive a http and a https version of the supplied base url
-        baseUrl = baseUrl.trim();
-        String lc = baseUrl.toLowerCase();
+        if (baseUrl == null)
+            throw new IllegalArgumentException("base url is null");
+        String url = baseUrl.trim();
+        String lc = url.toLowerCase();
         if (!lc.startsWith("http://") && !lc.startsWith("https://"))
             throw new Exception("base url does not start with http:// or https://");
         if (lc.startsWith("http://")) {
-            this.baseUrlHttp = baseUrl;
-            this.baseUrlHttps = "https://" + baseUrl.substring(7);
+            this.baseUrlHttp = url;
+            this.baseUrlHttps = "https://" + url.substring(7);
         } else {
-            this.baseUrlHttps = baseUrl;
-            this.baseUrlHttp = "http://" + baseUrl.substring(8);
+            this.baseUrlHttps = url;
+            this.baseUrlHttp = "http://" + url.substring(8);
         }
 
         this.apiKey = apiKey;
@@ -182,7 +184,7 @@ public class NexmoSnsClient {
 
         // Construct a query string as a list of NameValuePairs
 
-        List<NameValuePair> params = new ArrayList<NameValuePair>();
+        List<NameValuePair> params = new ArrayList<>();
 
         params.add(new BasicNameValuePair("api_key", this.apiKey));
         params.add(new BasicNameValuePair("api_secret", this.apiSecret));
diff --git a/src/com/nexmo/sns/sdk/request/Request.java b/src/com/nexmo/sns/sdk/request/Request.java
index 890889d..be20460 100644
--- a/src/com/nexmo/sns/sdk/request/Request.java
+++ b/src/com/nexmo/sns/sdk/request/Request.java
@@ -49,7 +49,7 @@ public abstract class Request {
                    String... queryParams) throws Exception {
         this.command = command;
 
-        Map<String, String> queryParameters = new LinkedHashMap<String, String>();
+        Map<String, String> params = new LinkedHashMap<>();
 
         // Construct a query string and a name/value pair Map from the query params supplied by the sub-class implementation
         int i = 0;
@@ -60,7 +60,7 @@ public abstract class Request {
                 param = str;
             } else {
                 String value = str;
-                queryParameters.put(param, value);
+                params.put(param, value);
                 if (i > 1)
                     sb.append('&');
                 value = URLEncoder.encode(value, "UTF-8");
@@ -70,7 +70,7 @@ public abstract class Request {
         }
 
 	this.queryString = sb.toString();
-        this.queryParameters = queryParameters;
+        this.queryParameters = params;
     }
 
     public String getCommand() {
diff --git a/src/com/nexmo/verify/sdk/BaseResult.java b/src/com/nexmo/verify/sdk/BaseResult.java
index aa1d077..ead318c 100644
--- a/src/com/nexmo/verify/sdk/BaseResult.java
+++ b/src/com/nexmo/verify/sdk/BaseResult.java
@@ -27,6 +27,8 @@ package com.nexmo.verify.sdk;
  */
 public abstract class BaseResult implements java.io.Serializable {
 
+    private static final long serialVersionUID = -2501134793517817181L;
+
     /**
      * Verify was successfully submitted to the Nexmo service
      */
@@ -128,14 +130,14 @@ public abstract class BaseResult implements java.io.Serializable {
     }
 
     public int getStatus() {
-        return status;
+        return this.status;
     }
 
     public String getErrorText() {
-        return errorText;
+        return this.errorText;
     }
 
     public boolean isTemporaryError() {
-        return temporaryError;
+        return this.temporaryError;
     }
 }
diff --git a/src/com/nexmo/verify/sdk/CheckResult.java b/src/com/nexmo/verify/sdk/CheckResult.java
index 0fe1b57..bb1c1c7 100644
--- a/src/com/nexmo/verify/sdk/CheckResult.java
+++ b/src/com/nexmo/verify/sdk/CheckResult.java
@@ -27,6 +27,8 @@ package com.nexmo.verify.sdk;
  */
 public class CheckResult extends BaseResult {
 
+    private static final long serialVersionUID = 8468662117199934412L;
+
     private final String eventId;
     private final float price;
     private final String currency;
@@ -44,15 +46,15 @@ public class CheckResult extends BaseResult {
     }
 
     public String getEventId() {
-        return eventId;
+        return this.eventId;
     }
 
     public float getPrice() {
-        return price;
+        return this.price;
     }
 
     public String getCurrency() {
-        return currency;
+        return this.currency;
     }
 
 }
diff --git a/src/com/nexmo/verify/sdk/NexmoVerifyClient.java b/src/com/nexmo/verify/sdk/NexmoVerifyClient.java
index a1b7f83..40ea149 100644
--- a/src/com/nexmo/verify/sdk/NexmoVerifyClient.java
+++ b/src/com/nexmo/verify/sdk/NexmoVerifyClient.java
@@ -164,18 +164,20 @@ public class NexmoVerifyClient {
      * @param soTimeout over-ride the default read-timeout with this value (in milliseconds)
      */
     public NexmoVerifyClient(String baseUrl,
-                          final String apiKey,
-                          final String apiSecret,
-                          final int connectionTimeout,
-                          final int soTimeout) throws ParserConfigurationException {
+                             final String apiKey,
+                             final String apiSecret,
+                             final int connectionTimeout,
+                             final int soTimeout) throws ParserConfigurationException {
 
         // Derive a http and a https version of the supplied base url
-        baseUrl = baseUrl.trim();
-        String lc = baseUrl.toLowerCase();
+        if (baseUrl == null)
+            throw new IllegalArgumentException("base url is null");
+        String url = baseUrl.trim();
+        String lc = url.toLowerCase();
         if (!lc.startsWith("http://") && !lc.startsWith("https://"))
             throw new IllegalArgumentException("base url does not start with http:// or https://");
 
-        this.baseUrl = baseUrl;
+        this.baseUrl = url;
         this.apiKey = apiKey;
         this.apiSecret = apiSecret;
         this.connectionTimeout = connectionTimeout;
@@ -207,7 +209,7 @@ public class NexmoVerifyClient {
 
         log.debug("HTTP-Number-Verify Client .. to [ " + number + " ] brand [ " + brand + " ] ");
 
-        List<NameValuePair> params = new ArrayList<NameValuePair>();
+        List<NameValuePair> params = new ArrayList<>();
 
         params.add(new BasicNameValuePair("api_key", this.apiKey));
         params.add(new BasicNameValuePair("api_secret", this.apiSecret));
@@ -228,7 +230,7 @@ public class NexmoVerifyClient {
         if (type != null)
             params.add(new BasicNameValuePair("require_type", type.toString()));
 
-        String baseUrl = this.baseUrl + PATH_VERIFY;
+        String verifyBaseUrl = this.baseUrl + PATH_VERIFY;
 
         // Now that we have generated a query string, we can instanciate a HttpClient,
         // construct a POST or GET method and execute to submit the request
@@ -239,13 +241,13 @@ public class NexmoVerifyClient {
             final boolean doPost = true;
             String url;
             if (doPost) {
-                HttpPost httpPost = new HttpPost(baseUrl);
+                HttpPost httpPost = new HttpPost(verifyBaseUrl);
                 httpPost.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
                 method = httpPost;
-                url = baseUrl + "?" + URLEncodedUtils.format(params, "utf-8");
+                url = verifyBaseUrl + "?" + URLEncodedUtils.format(params, "utf-8");
             } else {
                 String query = URLEncodedUtils.format(params, "utf-8");
-                method = new HttpGet(baseUrl + "?" + query);
+                method = new HttpGet(verifyBaseUrl + "?" + query);
                 url = method.getRequestLine().getUri();
             }
 
@@ -276,9 +278,9 @@ public class NexmoVerifyClient {
 
                 // return a COMMS failure ...
                 return new VerifyResult(VerifyResult.STATUS_COMMS_FAILURE,
-                        null,
-                        "Failed to communicate with NEXMO-HTTP url [ " + url + " ] ..." + e,
-                        true);
+                                        null,
+                                        "Failed to communicate with NEXMO-HTTP url [ " + url + " ] ..." + e,
+                                        true);
             }
         }
 
@@ -294,7 +296,7 @@ public class NexmoVerifyClient {
         return parseVerifyResult(root);
     }
 
-    private VerifyResult parseVerifyResult(Element root) throws IOException {
+    private static VerifyResult parseVerifyResult(Element root) throws IOException {
         String requestId = null;
         int status = -1;
         String errorText = null;
@@ -345,7 +347,7 @@ public class NexmoVerifyClient {
 
         log.debug("HTTP-Number-Verify-Check Client .. for [ " + requestId + " ] code [ " + code + " ] ");
 
-        List<NameValuePair> params = new ArrayList<NameValuePair>();
+        List<NameValuePair> params = new ArrayList<>();
 
         params.add(new BasicNameValuePair("api_key", this.apiKey));
         params.add(new BasicNameValuePair("api_secret", this.apiSecret));
@@ -356,7 +358,7 @@ public class NexmoVerifyClient {
         if (ipAddress != null)
             params.add(new BasicNameValuePair("ip_address", ipAddress));
 
-        String baseUrl = this.baseUrl + PATH_VERIFY_CHECK;
+        String verifyCheckBaseUrl = this.baseUrl + PATH_VERIFY_CHECK;
 
         // Now that we have generated a query string, we can instanciate a HttpClient,
         // construct a POST or GET method and execute to submit the request
@@ -367,13 +369,13 @@ public class NexmoVerifyClient {
             final boolean doPost = true;
             String url;
             if (doPost) {
-                HttpPost httpPost = new HttpPost(baseUrl);
+                HttpPost httpPost = new HttpPost(verifyCheckBaseUrl);
                 httpPost.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
                 method = httpPost;
-                url = baseUrl + "?" + URLEncodedUtils.format(params, "utf-8");
+                url = verifyCheckBaseUrl + "?" + URLEncodedUtils.format(params, "utf-8");
             } else {
                 String query = URLEncodedUtils.format(params, "utf-8");
-                method = new HttpGet(baseUrl + "?" + query);
+                method = new HttpGet(verifyCheckBaseUrl + "?" + query);
                 url = method.getRequestLine().getUri();
             }
 
@@ -490,7 +492,7 @@ public class NexmoVerifyClient {
 
         log.debug("HTTP-Number-Verify-Search Client .. for [ " + Arrays.toString(requestIds) + " ] ");
 
-        List<NameValuePair> params = new ArrayList<NameValuePair>();
+        List<NameValuePair> params = new ArrayList<>();
 
         params.add(new BasicNameValuePair("api_key", this.apiKey));
         params.add(new BasicNameValuePair("api_secret", this.apiSecret));
@@ -504,7 +506,7 @@ public class NexmoVerifyClient {
             }
         }
 
-        String baseUrl = this.baseUrl + PATH_VERIFY_SEARCH;
+        String verifySearchBaseUrl = this.baseUrl + PATH_VERIFY_SEARCH;
 
         // Now that we have generated a query string, we can instanciate a HttpClient,
         // construct a POST or GET method and execute to submit the request
@@ -515,13 +517,13 @@ public class NexmoVerifyClient {
             final boolean doPost = true;
             String url;
             if (doPost) {
-                HttpPost httpPost = new HttpPost(baseUrl);
+                HttpPost httpPost = new HttpPost(verifySearchBaseUrl);
                 httpPost.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
                 method = httpPost;
-                url = baseUrl + "?" + URLEncodedUtils.format(params, "utf-8");
+                url = verifySearchBaseUrl + "?" + URLEncodedUtils.format(params, "utf-8");
             } else {
                 String query = URLEncodedUtils.format(params, "utf-8");
-                method = new HttpGet(baseUrl + "?" + query);
+                method = new HttpGet(verifySearchBaseUrl + "?" + query);
                 url = method.getRequestLine().getUri();
             }
 
@@ -594,7 +596,7 @@ public class NexmoVerifyClient {
             return new SearchResult[] { parseSearchResult(root) };
         }
         else if ("verification_requests".equals(root.getNodeName())) {
-            List<SearchResult> results = new ArrayList<SearchResult>();
+            List<SearchResult> results = new ArrayList<>();
 
             NodeList fields = root.getChildNodes();
             for (int i = 0; i < fields.getLength(); i++) {
@@ -614,7 +616,7 @@ public class NexmoVerifyClient {
         }
     }
 
-    private SearchResult parseSearchResult(Element root) throws IOException {
+    private static SearchResult parseSearchResult(Element root) throws IOException {
         String requestId = null;
         String accountId = null;
         String number = null;
@@ -626,7 +628,7 @@ public class NexmoVerifyClient {
         float price = -1;
         String currency = null;
         SearchResult.VerificationStatus status = null;
-        List<SearchResult.VerifyCheck> checks = new ArrayList<SearchResult.VerifyCheck>();
+        List<SearchResult.VerifyCheck> checks = new ArrayList<>();
         String errorText = null;
 
         NodeList fields = root.getChildNodes();
@@ -749,7 +751,7 @@ public class NexmoVerifyClient {
                 errorText, false);
     }
 
-    private SearchResult.VerifyCheck parseVerifyCheck(Element root) throws IOException {
+    private static SearchResult.VerifyCheck parseVerifyCheck(Element root) throws IOException {
         String code = null;
         SearchResult.VerifyCheck.Status status = null;
         Date dateReceived = null;
@@ -798,7 +800,7 @@ public class NexmoVerifyClient {
         return new SearchResult.VerifyCheck(dateReceived, code, status, ipAddress);
     }
 
-    private Date parseDateTime(String str) throws ParseException {
+    private static Date parseDateTime(String str) throws ParseException {
         return sDateTimePattern.parse(str);
     }
 
diff --git a/src/com/nexmo/verify/sdk/SearchResult.java b/src/com/nexmo/verify/sdk/SearchResult.java
index 2af6b23..b1e5a5c 100644
--- a/src/com/nexmo/verify/sdk/SearchResult.java
+++ b/src/com/nexmo/verify/sdk/SearchResult.java
@@ -30,6 +30,8 @@ import java.util.List;
  */
 public class SearchResult extends BaseResult {
 
+    private static final long serialVersionUID = -2658346277382866298L;
+
     /** Used to define a verify check attempt. */
     public static class VerifyCheck {
         enum Status {
@@ -53,24 +55,24 @@ public class SearchResult extends BaseResult {
         }
 
         public Date getDate() {
-            return date;
+            return this.date;
         }
 
         public String getCode() {
-            return code;
+            return this.code;
         }
 
         public Status getStatus() {
-            return status;
+            return this.status;
         }
 
         public String getIpAddress() {
-            return ipAddress;
+            return this.ipAddress;
         }
 
         @Override
         public String toString() {
-            return "VerifyCheck [status=" + status + ", code=" + code + ", date=" + date + "]";
+            return "VerifyCheck [status=" + this.status + ", code=" + this.code + ", date=" + this.date + "]";
         }
     }
 
@@ -91,7 +93,7 @@ public class SearchResult extends BaseResult {
         }
 
         public String getName() {
-            return name != null ? name : name();
+            return this.name != null ? this.name : name();
         }
 
         @Override
@@ -144,56 +146,56 @@ public class SearchResult extends BaseResult {
     }
 
     public String getRequestId() {
-        return requestId;
+        return this.requestId;
     }
 
     public String getAccountId() {
-        return accountId;
+        return this.accountId;
     }
 
     public VerificationStatus getVerificationStatus() {
-        return verificationStatus;
+        return this.verificationStatus;
     }
 
     public String getNumber() {
-        return number;
+        return this.number;
     }
 
     public float getPrice() {
-        return price;
+        return this.price;
     }
 
     public String getCurrency() {
-        return currency;
+        return this.currency;
     }
 
     public String getSenderId() {
-        return senderId;
+        return this.senderId;
     }
 
     public Date getDateSubmitted() {
-        return dateSubmitted;
+        return this.dateSubmitted;
     }
 
     public Date getDateFinalized() {
-        return dateFinalized;
+        return this.dateFinalized;
     }
 
     public Date getFirstEventDate() {
-        return firstEventDate;
+        return this.firstEventDate;
     }
 
     public Date getLastEventDate() {
-        return lastEventDate;
+        return this.lastEventDate;
     }
 
     public List<VerifyCheck> getChecks() {
-        return checks;
+        return this.checks;
     }
 
     @Override
     public String toString() {
-        return "SearchResult [status=" + getStatus() + ", requestId=" + requestId +
-                ", verificationStatus=" + verificationStatus + "]";
+        return "SearchResult [status=" + getStatus() + ", requestId=" + this.requestId +
+                ", verificationStatus=" + this.verificationStatus + "]";
     }
 }
diff --git a/src/com/nexmo/verify/sdk/VerifyResult.java b/src/com/nexmo/verify/sdk/VerifyResult.java
index 3fa2949..23afb47 100644
--- a/src/com/nexmo/verify/sdk/VerifyResult.java
+++ b/src/com/nexmo/verify/sdk/VerifyResult.java
@@ -27,6 +27,8 @@ package com.nexmo.verify.sdk;
  */
 public class VerifyResult extends BaseResult {
 
+    private static final long serialVersionUID = 7235020156625478216L;
+
     private final String requestId;
 
     protected VerifyResult(final int status,
@@ -38,7 +40,7 @@ public class VerifyResult extends BaseResult {
     }
 
     public String getRequestId() {
-        return requestId;
+        return this.requestId;
     }
 
 }
